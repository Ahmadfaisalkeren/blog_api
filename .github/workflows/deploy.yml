name: Deploy Laravel to Docker Server
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Connect to VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            PROJECT_PATH="/var/www/docker/blog_api"

            if [ -d "$PROJECT_PATH/.git" ]; then
              cd $PROJECT_PATH
              echo "Project exists, performing update..."
            else
              rm -rf $PROJECT_PATH
              git clone -b main https://github.com/Ahmadfaisalkeren/blog_api.git $PROJECT_PATH
              cd $PROJECT_PATH
            fi

      - name: Pull Latest Changes
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            git pull origin main

      - name: Setup Environment File
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            if [ ! -f .env ]; then
              cp .env.example .env
              sed -i "s|APP_KEY=.*|APP_KEY=${{ secrets.APP_KEY }}|" .env
              sed -i "s|DB_HOST=.*|DB_HOST=blog_api_db|" .env
              sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" .env
              sed -i '/^DB_PASSWORD=/p; s/^DB_PASSWORD=/DB_ROOT_PASSWORD=/' .env
            fi

      - name: Build Docker Services
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            docker compose up -d --build

      - name: Wait for Database
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            counter=0
            max_retries=30
            until docker compose exec -T blog_api_db mysqladmin ping -h localhost -u root -p${{ secrets.DB_PASSWORD }} --silent; do
              counter=$((counter + 1))
              [ $counter -eq $max_retries ] && exit 1
              echo "Waiting for database... Attempt $counter/$max_retries"
              sleep 5
            done

      - name: Generate Application Key
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            docker compose exec -T blog_api php artisan key:generate

      - name: Run Database Migrations
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            docker compose exec -T blog_api php artisan migrate --force

      - name: Create Storage Link
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            docker compose exec -T blog_api php artisan storage:link

      - name: Clear Application Cache
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/docker/blog_api
            docker compose exec -T blog_api php artisan optimize:clear
